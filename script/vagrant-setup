#!/usr/bin/env bash

update_apt() {
  sudo apt-get update > /dev/null
}

install_with_apt() {
  update_apt
  sudo apt-get -y install $1
}

installed_with_apt() {
  sudo dpkg -s $1 > /dev/null
}

new_install_with_apt() {
  if installed_with_apt $1; then
    echo "$1 is already installed"
  else
    install_with_apt $1
  fi
}

write_file() {
  sudo cat > $1
}

download_to_file() {
  if [ -f $2 ]; then
    echo "skipping download, the file already exists"
  else
    curl $1 > $2
  fi
}

export DEBIAN_FRONTEND=noninteractive 

# Install APT utilities
new_install_with_apt "python-software-properties"

# Install tools to compile software
new_install_with_apt "build-essential"

# Create directory for downloads
mkdir -p /home/vagrant/downloads

# Create directory for local installs
mkdir -p /home/vagrant/local
chown -R vagrant:vagrant /home/vagrant/local

# Install various utilities
new_install_with_apt "tmux"
new_install_with_apt "git-core"
new_install_with_apt "ack-grep"
new_install_with_apt "curl"

# Setup vim if required
if installed_with_apt "vim"; then
  echo "vim is already installed"
else
  install_with_apt "vim"
  echo "EDITOR=\"vim\"" >> /home/vagrant/.profile
fi

# Install Ruby 1.9.3 if it is not already present
if [ -d "/home/vagrant/local/ruby-1.9.3-p194" ]; then
  echo "ruby-1.9.3-p194 is already installed"
else
  install_with_apt "libyaml-dev libssl-dev zlib1g-dev libreadline-dev openssl libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev ncurses-dev automake libtool bison libffi-dev"
  download_to_file "http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p194.tar.gz" "/home/vagrant/downloads/ruby-1.9.3-p194.tar.gz"
  cd /home/vagrant/downloads
  tar xvzf ruby-1.9.3-p194.tar.gz
  cd ruby-1.9.3-p194 && ./configure --prefix=/home/vagrant/local/ruby-1.9.3-p194 && make && make install
  cd /home/vagrant/local
  ln -s ruby-1.9.3-p194 ruby
  chown -R vagrant:vagrant ruby-1.9.3-p194
  chown -R vagrant:vagrant ruby
  echo "PATH=\"/home/vagrant/local/ruby/bin:\$PATH\"" >> /home/vagrant/.profile

  source /home/vagrant/.profile
  gem install bundler rubygems-bundler
fi

# Install nginx
if installed_with_apt "nginx"; then
  echo "Nginx is already installed"
else
  install_with_apt "nginx"
  
  write_file "/etc/nginx/sites-available/githubsearch" <<EOF
upstream frontend {
   server 127.0.0.1:9000;
}

server {
    listen 80 default;
    server_name local.githubsearch.com;

    root   /vagrant/public;
    index  index.html;
    error_page 500 502 503 504 /500.html;
    location   /500.html {
    }

    gzip             on;
    gzip_min_length  1000;
    gzip_proxied     expired no-cache no-store private auth;
    gzip_types       text/plain text/css application/xml application/x-javascript;
    gzip_disable     "MSIE [1-6]\.";

  location / {
     proxy_set_header  X-Real-IP  \$remote_addr;
     proxy_set_header  X-Forwarded-For \$proxy_add_x_forwarded_for;
     proxy_set_header Host \$http_host;
     proxy_redirect off;
     proxy_next_upstream off;
     proxy_read_timeout 300;

     if (-f \$request_filename) {
         expires      max;
     }
     if (-f \$request_filename/index.html) {
         rewrite (.*) \$1/index.html break;
     }

     if (-f \$request_filename.html) {
         rewrite (.*) \$1.html break;
     }

     if (!-f \$request_filename) {
         proxy_pass http://frontend;
         break;
     }
 }
}

server {
  listen 8081;

  location /nginx_status {
    stub_status on;
    access_log   off;
    allow 127.0.0.1;
    deny all;
  }
}
EOF

  cd /etc/nginx/sites-enabled
  rm default
  sudo ln -s /etc/nginx/sites-available/githubsearch githubsearch
  sudo service nginx restart
fi
